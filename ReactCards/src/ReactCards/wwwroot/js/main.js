(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var mountNode = document.getElementById('cardsContainer');

var Row = ReactBootstrap.Row;
var Col = ReactBootstrap.Col;
var Button = ReactBootstrap.Button;
var ButtonToolbar = ReactBootstrap.ButtonToolbar;
var Well = ReactBootstrap.Well;

var TagContainer = React.createClass({displayName: "TagContainer",
    render: function () {
        var tagNodes = this.props.tags.map(function (tag) {
            return (
                React.createElement(Tag, {key: tag.Id, onTagClick: this.props.onTagClick.bind(null, tag.Id), tagName: tag.Name})
            );
        }.bind(this));
        return (
            React.createElement("div", {className: "container tagContainer"}, 
                React.createElement(Well, null, 
                    React.createElement(ButtonToolbar, null, 
                        React.createElement(Button, {bsStyle: "primary", onClick: this.props.onTagClick.bind(null,null)}, "Reset"), tagNodes
                    )
                )
            )
        );
    }
});

var Tag = React.createClass({displayName: "Tag",
    render: function () {
        return (
            React.createElement(Button, {className: "tag", onClick: this.props.onTagClick}, this.props.tagName)
        );
    }
});

var CardContainer = React.createClass({displayName: "CardContainer",
    render: function () {
        var cardDetail = this.props.cardDetail;
        if (cardDetail != null) {
            return (
                React.createElement("div", {className: "container cardContainer"}, 
                    React.createElement(Row, null, 
                        React.createElement(CardDetail, {title: cardDetail.Title, createdDate: cardDetail.CreatedDate, content: cardDetail.Content})
                    )
                )
            );
        } else {
            var cardNodes = this.props.cards.map(function (card) {
                return (
                    React.createElement(Card, {key: card.Id, title: card.Title, summary: card.Summary, createdDate: card.CreatedDate, tags: card.Tags, onTagClick: this.props.onTagClick, onCardClick: this.props.onCardClick.bind(null,card.Id)})
                );
            }.bind(this));
            return (
                React.createElement("div", {className: "container cardContainer"}, 
                    React.createElement(Row, null, 
                        cardNodes
                    )
                )
            );
        }
    }
});

var Card = React.createClass({displayName: "Card",
    render: function () {
        return (
            React.createElement(Col, {xs: 12, md: 6}, 
                React.createElement("div", {className: "card"}, 
                    React.createElement("div", {className: "card-header clickable", onClick: this.props.onCardClick}, 
                        React.createElement("h3", {className: "card-header-title"}, this.props.title), 
                        React.createElement("span", {className: "card-header-date"}, this.props.createdDate)
                    ), 
                    React.createElement("div", {className: "card-summary"}, 
                        React.createElement("p", null, this.props.summary)
                    ), 
                    React.createElement(MiniTagContainer, {tags: this.props.tags, onTagClick: this.props.onTagClick})
                )
            )
        );
    }
});

var CardDetail = React.createClass({displayName: "CardDetail",
    render: function () {
        var content = { __html: this.props.content };
        return (
            React.createElement(Col, {xs: 12}, 
                React.createElement("div", {className: "card"}, 
                    React.createElement("div", {className: "card-header"}, 
                        React.createElement("h3", {className: "card-header-title"}, this.props.title), 
                        React.createElement("span", {className: "card-header-date"}, this.props.createdDate)
                    ), 
                    React.createElement("div", {className: "card-content"}, 
                        React.createElement("div", {dangerouslySetInnerHTML: content})
                    )
                )
            )
        );
    }
});

var MiniTagContainer = React.createClass({displayName: "MiniTagContainer",
    render: function () {
        var tagNodes = this.props.tags.map(function (tag) {
            return (
                React.createElement(MiniTag, {key: tag.Id, onTagClick: this.props.onTagClick.bind(null, tag.Id), tagName: tag.Name})
            );
        }.bind(this));
        return (
            React.createElement("div", {className: "container miniTagContainer"}, 
                React.createElement(ButtonToolbar, null, 
                    tagNodes
                )
            )
        );
    }
});

var MiniTag = React.createClass({displayName: "MiniTag",
    render: function () {
        return (
            React.createElement(Button, {className: "miniTag", bsSize: "xsmall", onClick: this.props.onTagClick}, this.props.tagName)
        );
    }
});

var PageContainer = React.createClass({displayName: "PageContainer",
    loadFromServer: function (stateProp, apiUrl) {
        var xhr = new XMLHttpRequest();
        xhr.open("get", apiUrl, true);
        xhr.onload = function () {
            var data = JSON.parse(xhr.responseText);
            var stateObject = function () {
                returnObj = {};
                returnObj[stateProp] = data;
                return returnObj;
            };
            this.setState(stateObject);
        }.bind(this);
        xhr.send();
    },
    getInitialState: function () {
        return {
            cards: [],
            cardDetail: null,
            tags: []
        };
    },
    componentDidMount: function () {
        this.loadFromServer("tags", "api/tags");
        this.loadFromServer("cards", "api/cards");
    },
    handleTagClick: function (tagId) {
        var qry = "";
        if (tagId != null) qry = "?tagId=" + tagId;
        this.setState({ cardDetail: null })
        this.loadFromServer("cards", "api/cards" + qry);
    },
    handleCardClick: function (cardId) {
        var apiUrl = "api/cards/" + cardId;
        this.loadFromServer("cardDetail", apiUrl);
    },
    render: function () {
        return (
            React.createElement("div", {className: "pageContainer"}, 
                React.createElement(TagContainer, {onTagClick: this.handleTagClick, tags: this.state.tags}), 
                React.createElement(CardContainer, {onTagClick: this.handleTagClick, onCardClick: this.handleCardClick, cards: this.state.cards, cardDetail: this.state.cardDetail})
            )
        );
    }
});

ReactDOM.render(
    React.createElement(PageContainer, null),
    mountNode
);
},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
