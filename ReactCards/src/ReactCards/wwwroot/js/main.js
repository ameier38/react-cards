(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var mountNode = document.getElementById('cardsContainer');

var Row = ReactBootstrap.Row;
var Col = ReactBootstrap.Col;
var Button = ReactBootstrap.Button;
var ButtonToolbar = ReactBootstrap.ButtonToolbar;
var Well = ReactBootstrap.Well;

var TagContainer = React.createClass({displayName: "TagContainer",
    render: function () {
        var tagNodes = this.props.tags.map(function (tag) {
            return (
                React.createElement(Tag, {key: tag.Id, onTagClick: this.props.onTagClick.bind(null, '?tagId=' + tag.Id), tagName: tag.Name})
            );
        }.bind(this));
        return (
            React.createElement("div", {className: "container tagContainer"}, 
                React.createElement(Well, null, 
                    React.createElement(ButtonToolbar, null, 
                        React.createElement(Button, {bsStyle: "primary", onClick: this.props.onTagClick.bind(null,'')}, "Reset"), 
                        tagNodes
                    )
                )
            )
        );
    }
});

var Tag = React.createClass({displayName: "Tag",
    render: function () {
        return (
            React.createElement(Button, {className: "tag", onClick: this.props.onTagClick}, this.props.tagName)
        );
    }
});

var CardContainer = React.createClass({displayName: "CardContainer",
    render: function () {
        var cardNodes = this.props.cards.map(function (card) {
            return (
                React.createElement(Card, {key: card.Id, title: card.Title, summary: card.Summary, date: card.CreatedDate, url: this.props.cardApi + "/" + card.Path, tags: card.Tags, onTagClick: this.props.onTagClick})
            );
        }.bind(this));
        return (
            React.createElement("div", {className: "container cardContainer"}, 
                React.createElement(Row, null, 
                    cardNodes
                )
            )
        );
    }
});

var Card = React.createClass({displayName: "Card",
    render: function () {
        return (
            React.createElement(Col, {xs: 12, md: 6}, 
                React.createElement("div", {className: "card"}, 
                    React.createElement("a", {className: "card-header", href: this.props.url}, 
                        React.createElement("h3", {className: "card-header-title"}, this.props.title), 
                        React.createElement("span", {className: "card-header-date"}, this.props.date)
                    ), 
                    React.createElement("div", {className: "card-body"}, 
                        React.createElement("p", null, this.props.summary)
                    ), 
                    React.createElement(MiniTagContainer, {tags: this.props.tags, onTagClick: this.props.onTagClick})
                )
            )
        );
    }
});

var MiniTagContainer = React.createClass({displayName: "MiniTagContainer",
    render: function () {
        var tagNodes = this.props.tags.map(function (tag) {
            return (
                React.createElement(MiniTag, {key: tag.Id, onTagClick: this.props.onTagClick.bind(null, '?tagId=' + tag.Id), tagName: tag.Name})
            );
        }.bind(this));
        return (
            React.createElement("div", {className: "container miniTagContainer"}, 
                React.createElement(ButtonToolbar, null, 
                    tagNodes
                )
            )
        );
    }
});

var MiniTag = React.createClass({displayName: "MiniTag",
    render: function () {
        return (
            React.createElement(Button, {className: "miniTag", bsSize: "xsmall", onClick: this.props.onTagClick}, this.props.tagName)
        );
    }
});

var PageContainer = React.createClass({displayName: "PageContainer",
    loadCardsFromServer: function (url) {
        var xhr = new XMLHttpRequest();
        xhr.open('get', url, true);
        xhr.onload = function () {
            var data = JSON.parse(xhr.responseText);
            this.setState({ cards: data });
        }.bind(this);
        xhr.send();
    },
    loadTagsFromServer: function (url) {
        var xhr = new XMLHttpRequest();
        xhr.open('get', url, true);
        xhr.onload = function () {
            var data = JSON.parse(xhr.responseText);
            this.setState({ tags: data });
        }.bind(this);
        xhr.send();
    },
    getInitialState: function () {
        return {
            cards: [],
            tags: []
        };
    },
    componentDidMount: function () {
        this.loadTagsFromServer(this.props.tagApi);
        this.loadCardsFromServer(this.props.cardApi);
    },
    handleTagClick: function (qry, event) {
        var url = this.props.cardApi + qry;
        this.loadCardsFromServer(url);
    },
    render: function () {
        return (
            React.createElement("div", {className: "pageContainer"}, 
                React.createElement(TagContainer, {onTagClick: this.handleTagClick, tags: this.state.tags}), 
                React.createElement(CardContainer, {onTagClick: this.handleTagClick, cards: this.state.cards, cardApi: this.props.cardApi})
            )
        );
    }
});

ReactDOM.render(
    React.createElement(PageContainer, {tagApi: "api/tags", cardApi: "api/cards"}),
    mountNode
);
},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
